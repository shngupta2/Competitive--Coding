//Question: https://leetcode.com/problems/partition-equal-subset-sum/
//Reference video https://www.youtube.com/watch?v=UmMh7xp07kY&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=8

class Solution {
public:
    bool subsetsum(vector<int>& nums, int& sum, int& n, vector <vector<bool>>& t) {
        for(int i = 0; i < n + 1; i++) {
            for(int j = 0; j < sum + 1; j++) {
                if(i == 0) t[i][j] = false;
                else if(j == 0) t[i][j] = true;
                else if(nums[i - 1] <= j) {
                    t[i][j] = t[i - 1][j - nums[i - 1]] || t[i - 1][j];
                }
                else {
                    t[i][j] = t[i - 1][j];
                }
            }
        }
        return t[n][sum];
        
        
    }
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        
        int sum = 0;
        for(int i = 0; i < n; i++) sum +=nums[i];
        int k = sum / 2;
        if(sum % 2 != 0) return false;
        else {
            vector <vector<bool>> t(n + 1, vector<bool> (sum + 1));
            return subsetsum(nums, k, n, t);    
            
        }
        
    }
};
