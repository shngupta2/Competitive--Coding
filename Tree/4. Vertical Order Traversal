//Question https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
     vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> res;
        // to store hd and for each hd levels and for each levels increasing order of node val.
        map <int, map<int, set<int>>> m; 
        
        //queue for level order traversing structure of queue is node, horixontal distance , level;
        queue<pair<TreeNode*, pair<int, int>>> q;
        
        if(!root) return res;
        
        // initialize queue by pushing root with hoz=rizontal distance 0 and level 0.
        q.push(make_pair(root, make_pair(0, 0)));
        while(!q.empty()) {
            auto p = q.front();
            q.pop();
            
            // to store node
            TreeNode* tmp = p.first;
            
            // to store horizontal distance
            int x = p.second.first;
            
            //to store level
            int y = p.second.second;
            
            // in map storing horizontal distance x and for each horizontal dist. x level y at which node exist node value stored 
            //in set at which nodes in increasing order of there value stored here we have all distinct pairs of hd and levels.
            m[x][y].insert(tmp->val);
            
            // traverse for left and right child
            if(tmp->left) {q.push(make_pair(tmp->left, make_pair(x - 1, y + 1)));}
            if(tmp->right) {q.push(make_pair(tmp->right, make_pair(x + 1, y + 1)));}
        }
        
        // traverse map
        for(auto p : m) {
          //for each hd value will be stored in this vector later it will be push_backed in final 2d result vector 
            vector<int> col;
            
            //for each hd traverse for each level where value exist and insert in temp vector.
            for(auto q : p.second) {
                col.insert(col.end(), q.second.begin(), q.second.end());
            }
            res.push_back(col);
        }
        return res;
    }
};
