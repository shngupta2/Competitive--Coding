
// Binary Tree Preorder Traversal Recursive Solution:

Void pre(TreeNode* root) {
  if(root} {
    cout<<root->val;
    pre(root->left);
    pre(root->right);
    }
}

// Binary Tree Preorder Traversal Iterative Solution:

voidpre(TreeNode* root) {
  stack <TreeNode* > s;
  if(!root) 
      return;
  while(1) {
    while(root) {
        cout<<root->val;
        s.push(root);
        root = root->left;
        }
        if(s.empty()) 
            break;
        root = s.pop();
        root = root->right;
    }
 }
  
 // N-ary Tree Preorder Traversal
 // Question https://leetcode.com/problems/n-ary-tree-preorder-traversal/
 
 /*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
     vector <int> res;
    vector<int> preorder(Node* root) {
       
        if(root == NULL) return res;
        res.push_back(root->val);
        for(int i = 0; i < root->children.size(); i++) {
            preorder(root->children[i]);
        }
        return res;
    }
};
 
