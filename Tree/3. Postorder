//B.Tree Postorder Traverssal Recursive Solution:

void postorder(TreeNode* root) {
`if(root) {
  postorder(root->left);
  postorder(root->right);
  cout<<root->val;
  }
}

// B. Tree Postorder Traversal Iterative Solution
// Approach- 1 : using two stacks:

void postorder(TreeNode* root) {
  stack <TreeNode* > s1;
  stack <TreeNode* > s2;
  TreeNode* node;
  if(!root) 
    return;
  s1.push(root);
  while(!s1.empty()) {
      node = s1.top();
      s1.pop();
      s2.push(node);
      if(root->left)  s1.push(root->left);
      if(root->right) s1.push(root->right);
      }
     while(!s2.empty()) {
        node = s2.top();
        s2.pop();
        cout<<node->val;
        }
   }
   
   //Approach- 2 : using one stack and one pointer;
   
   void postorder(TreeNode* root) {
      stack <TreeNode* > s;
      TreeNode* prev = NULL;
      do {
        while(root != NULL) {
          s.push(root);
          root = root->left;
          }
          while(root == NULL && !s.empty()) {
            root = s.top();
            if(root->right == NULL || root->right == prev) {
              cout<<root->val;
              s.pop();
              prev = root;
              root = NULL;
              }
              else {
              root = root->right;
              }
          }
        } while(!s.empty()) 
      }
      
// N-ary tree Post order traversal
// Question https://leetcode.com/problems/n-ary-tree-postorder-traversal/

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    vector <int> r;
    vector<int> postorder(Node* root) {
        if(root == NULL) return r;
        for(int i = 0; i < root->children.size(); i++) {
            postorder(root->children[i]);
           
        }
         r.push_back(root->val);
        return r;
    }
};
